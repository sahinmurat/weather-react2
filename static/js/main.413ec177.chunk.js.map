{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","process","console","log","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","name","sys","country","catch","err","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateCreater","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEMA,EACCC,mCADDD,EAEEC,kDAERC,QAAQC,IAAIF,oCAmEGG,MAlEf,WAAgB,IAAD,UACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAkCb,OAEE,qBAAKC,WAAkB,OAAPF,QAAO,IAAPA,GAAA,UAAAA,EAASG,YAAT,eAAeC,MAAO,GAAK,OAAgB,OAAPJ,QAAO,IAAPA,GAAA,UAAAA,EAASG,YAAT,eAAeC,MAAO,EAAI,YAAqB,OAAPJ,QAAO,IAAPA,GAAA,UAAAA,EAASG,YAAT,eAAeC,MAAO,EAAI,WAAa,YAAnI,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,aACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAzCK,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAItB,EAAJ,aAAiBM,EAAjB,kBAAgCN,EAAhC,kBACFuB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLxB,QAAQC,IAAI,IAAKuB,GACjBjB,EAAWiB,GACXnB,EAAS,IACTL,QAAQC,IAAIK,GACZN,QAAQC,IAAI,eAAgBK,EAAQmB,MACpCzB,QAAQC,IAAI,sBAAuBK,EAAQoB,IAAIC,YAEhDC,OAAO,SAAAC,GAAG,OAAI7B,QAAQC,IAAI4B,WAgCF,oBAAhBvB,EAAQmB,KAEb,gCACE,sBAAKjB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,cAA4BF,EAAQmB,QACpC,sBAAKjB,UAAU,OAAf,cAjCM,SAACsB,GACnB,IAGIC,EAFO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAEjED,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAwBEE,CAAY,IAAIC,YAE1C,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBiC,KAAKC,MAAL,OAAWpC,QAAX,IAAWA,GAAX,UAAWA,EAASG,YAApB,aAAW,EAAeC,MAAjD,WACA,sBAAKF,UAAU,UAAf,cAA2BF,EAAQA,QAAQ,GAAGG,cAEvC,mBAAGD,UAAU,SAAb,iECtDRmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.413ec177.chunk.js","sourcesContent":["import React, {useState } from 'react';\r\n\r\nconst api = {\r\n  key: process.env.REACT_APP_API_KEY,\r\n  base: process.env.REACT_APP_BASEURL\r\n}\r\nconsole.log(process.env.REACT_APP_API_KEY)\r\nfunction App() {\r\n  const [query, setQuery] = useState('')\r\n  const [weather, setWeather] = useState({})\r\n\r\n  const search = evt => {\r\n    if (evt.key === 'Enter') {\r\n      fetch(`${api.base}q=${query}&appid=${api.key}&units=metric`)\r\n        .then(res => res.json())\r\n        .then((result) => {\r\n          console.log('a', result)\r\n          setWeather(result)\r\n          setQuery('')\r\n          console.log(weather)\r\n          console.log('weather.name', weather.name)\r\n          console.log('weather.sys.country', weather.sys.country)\r\n        })\r\n        .catch((err => console.log(err)))\r\n    }\r\n  }\r\n\r\n  const dateCreater = (d) => {\r\n    let months = ['January', 'February', 'March', 'April', 'Mai', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\r\n    let days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className={weather?.main?.temp > 30 ? 'app' : (weather?.main?.temp > 5 ? 'app warm' : (weather?.main?.temp > 0 ? 'app cold' : 'app xcold'))}   >\r\n      <main>\r\n        <div className='search-box'>\r\n          <input\r\n            type='text'\r\n            className='search-bar'\r\n            placeholder='Search....'\r\n            onChange={e => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {(typeof weather.name != 'undefined') ?\r\n          (\r\n            <div>\r\n              <div className='location-box'>\r\n                <div className='location'> {weather.name}</div>\r\n                <div className='date'> {dateCreater(new Date())}</div>\r\n              </div>\r\n              <div className='weather-box'>\r\n                <div className='temp'>{Math.round(weather?.main?.temp)}Â°C</div>\r\n                <div className='weather'> {weather.weather[0].main}</div>\r\n              </div>\r\n            </div>) : (<p className='option'>There is no any place! Try again correctly...</p>)}\r\n\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}